{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"compartmental   Utility tools for Approximate Bayesian computation on compartmental models"},{"location":"#instalation","title":"Instalation","text":"<p>compartmental releases are available as wheel packages on PyPI. You can install the last version using <code>pip</code>: <pre><code>pip install compartmental\n</code></pre></p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentations is automatically generated from code on main push and hosted in github-pages here.</p>"},{"location":"#help","title":"Help","text":"<p>Just open an issue with the <code>question</code> tag (or clic here), I would love to help!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>You can contribute with:</p> <ul> <li>Examples</li> <li>Documentation</li> <li>Bug report/fix</li> <li>Features</li> <li>Code</li> </ul> <p>Even only feedback is greatly apreciated. </p> <p>Just create an issue and let me know you want to help! </p>"},{"location":"#licensing","title":"Licensing","text":"<p>compartmental is released under the Apache License Version 2.0.</p>"},{"location":"LICENSE/","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>reference<ul> <li>compartmental<ul> <li>generic_model</li> <li>parameters<ul> <li>parameters_manager</li> </ul> </li> <li>util</li> </ul> </li> </ul> </li> <li>examples<ul> <li>examples<ul> <li>MY_MODEL</li> <li>SEIR</li> <li>SIR</li> </ul> </li> </ul> </li> </ul>"},{"location":"examples/MY_MODEL/","title":"MY MODEL","text":"<p>This examples follows the model exposed in my Physics Undergraduate Thesis Project (2021-2022) whose code can be found  GitHub repository.</p> <p>The main equations of the model are the following:</p> \\[ \\begin{align}     \\tag{4.5} S_h[t+1]    &amp;= S_T[t] \\cdot (1-p(t))sh (1-\\phi)\\\\     \\tag{4.6} S[t+1]      &amp;= (S_T[t] - S_h[t]) \\cdot (1- P_{infection})\\\\     \\tag{4.7} E[t+1]      &amp;= (S_T[t]-S_h[t]) \\cdot P_{infection} + (1-\\eta)\\cdot E[t]\\\\     \\tag{4.8} I[t+1]      &amp;= \\eta \\cdot E[t]  + (1- \\mu)\\cdot I[t]\\\\     \\tag{4.9} R[t+1]      &amp;=  \\mu (1-IFR) \\cdot I[t]  + R[t] \\\\     \\tag{4.10} P_d[t+1]    &amp;=  \\mu IFR \\cdot I[t] + (1-\\xi)\\cdot P_d[t] \\\\     \\tag{4.11} D[t+1]      &amp;= \\xi\\cdot P_d[t] + D[t]  \\end{align} \\] <p>Where </p> \\[ \\begin{align}      \\tag{4.3} P_{infection} &amp;= p(t)\\cdot P_{infection}^{active} + (1-p(t))(1-sh(1-\\phi))\\cdot P_{infection}^{lockdown}, \\\\     P_{infection}^{j} &amp;= 1- \\left(1-\\lambda\\frac{I}{N}\\right)^{\\left&lt;k_j\\right&gt;}; \\quad \\textrm{with} \\quad j=active, lockdown.\\\\     sh &amp;= (1-\\frac{I}{N})^{\\sigma-1} \\end{align} \\] <p>The configuration could be:</p> <pre><code>model = {\n\"simulation\": {\n\"n_simulations\": 100000,\n\"n_executions\": 1,\n\"n_steps\": 100\n},\n\"compartments\": {\n\"Sh\": { \"initial_value\": 0 },\n\"S\": { \"initial_value\": 1,\n\"minus_compartments\": \"I\"\n},\n\"E\": { \"initial_value\": 0 },\n\"I\": { \"initial_value\": \"Io\",\n},\n\"R\": { \"initial_value\": 0 },\n\"Pd\": { \"initial_value\": 0 },\n\"D\": { \"initial_value\": 0 },\n},\n\"params\": {\n\"betta\": {\n\"min\": 0.01,\n\"max\": 0.3,\n\"min_limit\": 0.01, // (1)\n\"max_limit\": 0.3\n},\n\"Io\": {\n\"min\": 1e-8,\n\"max\": 1e-5,\n\"min_limit\": 0,\n\"max_limit\": 1e-4\n},\n\"phi\": {\n\"min\": 0,\n\"max\": 0.5,\n\"min_limit\": 0,\n\"max_limit\": 1\n},\n\"IFR\": {\n\"min\":0.006,\n\"max\":0.014,\n\"min_limit\": 0.006,\n\"max_limit\": 0.014\n},\n\"offset\": {\n\"type\": \"int\", // (2)\n\"min\":5,\n\"max\":10,\n\"min_limit\": 0,\n\"max_limit\": 10\n}\n},\n\"fixed_params\": {\n\"K_active\": 12.4,\n\"K_lockdown\": 2.4,\n\"sigma\": 3.4,\n\"mu\": 1/4.2,\n\"eta\":1/5.2,\n\"xi\":1/10,\n},\n\"reference\": {\n\"compartments\" : [\"D\"],\n\"offset\": \"offset\" // (3)\n},\n\"results\": { \"save_percentage\": 0.5\n}\n}\n</code></pre> <ol> <li><code>min_limit</code> and <code>max_limit</code> are the absolute limits in the automatic adjustment</li> <li>This <code>offset</code> parameter will be used as an offset between the simulated data and the reference data</li> <li>An offset can be applied to the reference while comparing it with the simulation data. Can be an interger or a parameter name defined in <code>params</code> </li> </ol> <p>Now we need to define the evolution function of the system and assign it to the model. In this case the evolution function is a lot more complicated than in previous examples. </p> <p>Note: In case of complex problems like this it may be needed to write <code>[:]</code> on values assignation. </p> <pre><code>import compartmental\ncompartmental.use_numpy()\n# compartmental.use_cupy() # For GPU usage\nMyModel = compartmental.GenericModel(model)\ndef evolve(m, time, p_active, *args, **kargs):\nST = m.S + m.Sh\nsh = (1 - m.I) ** (m.sigma - 1)\nP_infection_active = 1- (1- m.betta * m.I) ** m.K_active\nP_infection_lockdown = 1- (1- m.betta * m.I) ** m.K_lockdown\nP_infection = p_active[time] * P_infection_active + (1-p_active[time]) * (1-sh*(1-m.phi)) * P_infection_lockdown\nm.Sh[:]    = ST * (1-p_active[time])*sh*(1-m.phi)\ndelta_S = ST * P_infection\nm.S[:]     = (ST - m.Sh)  - delta_S\nm.D[:]     = m.xi * m.Pd\nm.R[:]     = m.mu * (1-m.IFR)  * m.I + m.R\nm.Pd[:]    = m.mu * m.IFR  * m.I + (1-m.xi) * m.Pd\nm.I[:]     = m.eta  * m.E + (1- m.mu) * m.I\nm.E[:]     = delta_S + (1-m.eta) * m.E\nMyModel.evolve = evolve\n</code></pre> <p>For this example we will use a <code>p_active</code> defined as follows: <pre><code>p_active = [1 if t&lt;35 else 0.1 for t in range(model[\"simulation\"][\"n_steps\"])]\n</code></pre></p> <p>Once the model is defined and the evolution function is set we can create a trajectory of the model. We can set specific values for the random parameters as follows:</p> <p><pre><code>sample, sample_params = compartmental.util.get_model_sample_trajectory(\nMyModel, p_active,\n**{\"betta\": 0.13,\n\"Io\": 1e-6,\n\"phi\": 0.1,\n\"IFR\": 0.01,\n\"offset\": 8} # (1)\n)\nreference = numpy.copy(sample[MyModel.compartment_name_to_index[\"D\"]])\n</code></pre> 1. Here the offset will be used to automatically offset the values because the parameter <code>offset</code> is defined as the reference's offset in the model configuration.</p> <p>Plotting the <code>sample</code> yields:</p> <p><pre><code>import matplotlib.pyplot as plt\nlist_of_sample_lines = []\n_range = numpy.arange(model[\"simulation\"][\"n_steps\"])\nfor s in sample:\nlist_of_sample_lines.append(_range)\nlist_of_sample_lines.append(s)\nlist_of_sample_lines.append('-')\nsample_lines = plt.plot(*list_of_sample_lines)\nfor line, compartment in zip(sample_lines, model[\"compartments\"]):\nline.set_label(compartment)\nplt.title(\"Compartments population evolution\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Population / Total\")\nplt.legend()\nplt.show()\n</code></pre> </p> <p>Now we can use the <code>sample</code> and try to infer the values of \\(\\beta\\), \\(Io\\), \\(\\phi\\), \\(IFR\\) and the <code>offset</code>:</p> <pre><code>ITERS = 15\n# Main loop of adjustments:\n# 1. Run\n# 2. Read results\n# 3. Compute weights\n# 4. Adjuts configuration\nfor i in range(ITERS):\nMyModel.run(reference, f\"my_model{i}.data\", p_active)\nresults = compartmental.util.load_parameters(f\"my_model{i}.data\")\nweights = numpy.exp(-2*results[0]/numpy.min(results[0]))\ncompartmental.util.auto_adjust_model_params(MyModel, results, weights)\n# Update for final photo with more simulations\nMyModel.configuration.update({\n\"simulation\": {\n\"n_simulations\": 1000000,\n\"n_executions\": 4,\n\"n_steps\": 100\n},\n\"results\": {\n\"save_percentage\": 0.01\n}\n})\nMyModel.run(reference, \"my_model.data\", p_active)\n</code></pre> <p>Finnally we can plot the results:</p> <pre><code>results = compartmental.util.load_parameters(\"my_model.data\")\nweights = numpy.exp(-2*results[0]/numpy.min(results[0]))\nweights /= numpy.min(weights)\npercentiles = compartmental.util.get_percentiles_from_results(MyModel, results, 30, 70, weights, p_active, weights)\ntry:\n# In case cupy is used\npercentiles = percentiles.get()\nsample = sample.get()\nweights = weights.get()\nresults = results.get()\nsample_params = sample_params.get()\nexcept AttributeError:\npass\n# Plot sample with a shadow of the results.\nplt.figure()\nplt.fill_between(numpy.arange(percentiles.shape[2]), percentiles[0,0], percentiles[0,2], alpha=0.3)\nplt.xlabel(\"Simulation time\")\nplt.ylabel(\"Daily Deaths / Total population\")\nplt.plot(reference, 'black')\nplt.plot(numpy.arange(percentiles.shape[2]), percentiles[0,1], '--', color='purple')\ntax = plt.twinx()\ntax.plot(p_active, ':', color='green')\ntax.set_ylabel(r\"$p(t)$\")\n# Histograms with infered likelihood of the parameters\nfig, *axes = plt.subplots(1, len(results)-1)\nfig.set_figheight(3.5)\nfig.set_figwidth(16)\nfor i, ax in enumerate(axes[0], 1):\n_5, _50, _95 = compartmental.util.weighted_quantile(results[i], [5, 50, 95], weights)\nfor k, index in MyModel.param_to_index.items():\nif index == i-1:\nax.set_title(k)\nax.hist(results[i], weights=weights)\nax.vlines(_5, *ax.get_ylim(), 'green')\nax.vlines(_50, *ax.get_ylim(), 'black')\nax.vlines(_95, *ax.get_ylim(), 'purple')\nax.vlines(sample_params[i-1], ax.get_ylim()[0], ax.get_ylim()[1]*3/4, 'red')\nplt.show()\n</code></pre> <p> </p>"},{"location":"examples/SEIR/","title":"SEIR","text":"\\[ \\begin{align}     \\nonumber \\dot{S} &amp;= -\\beta \\langle k \\rangle \\frac{I}{N}S. \\\\     \\nonumber \\dot{E} &amp;=  \\beta \\langle k \\rangle \\frac{I}{N}S - \\eta E. \\\\     \\nonumber \\dot{I} &amp;= \\eta E - \\mu I. \\\\     \\nonumber \\dot{R} &amp;= \\mu I. \\end{align} \\] <pre><code>seir_model = {\n\"simulation\": { // (1)\n\"n_simulations\": 1000000, // (2)\n\"n_executions\": 1, // (3)\n\"n_steps\": 230 // (4)\n},\n\"compartments\": { // (5)\n\"S\": { \"initial_value\": 1, // (6)\n\"minus_compartments\": \"I\" // (7)\n},\n\"E\": { \"initial_value\": 0 },\n\"I\": { \"initial_value\": \"Io\", // (8)\n},\n\"R\": { \"initial_value\": 0 },\n},\n\"params\": { // (9)\n\"betta\": {\n\"min\": 0.1, // (10)\n\"max\": 0.3\n},\n\"Io\": {\n\"min\": 1e-6,\n\"max\": 1e-4\n}\n},\n\"fixed_params\": { // (11)\n\"K_mean\": 1,\n\"mu\": 0.07,\n\"eta\":0.08\n},\n\"reference\": { // (12)\n\"compartments\" : [\"R\"]\n},\n\"results\": { \"save_percentage\": 0.01 // (13)\n}\n}\n</code></pre> <ol> <li>Here we define simulation parameters</li> <li>How many simulations to do in parallel each execution</li> <li>Number of times the simulation runs</li> <li> <p>Number of times the evolution function is executed each simulation</p> </li> <li> <p>Here we define the compartments of the model. Each field must be unique</p> </li> <li>Initial value set to a fixed number</li> <li>You subtract the value of other compartments after all of them are initialized</li> <li> <p>You can set the initial value of compartments as parameters</p> </li> <li> <p>Here we define parameters that will be randomly generated for each simulation. Each field must be unique</p> </li> <li> <p>A min value and max value must be set for each parameter</p> </li> <li> <p>Definition of constant for all the simulations</p> </li> <li> <p>Definition of which compartments the results should be compared with</p> </li> <li> <p>Percentage of simulations that will be saved. The best of course</p> </li> </ol> <p>Now we need to define the evolution function of the system and assign it to the model: <pre><code>import compartmental as gcm\ngcm.use_numpy()\n# gcm.use_cupy() # For GPU usage\nSeirModel = gcm.GenericModel(seir_model)\ndef evolve(m, *args, **kargs):\np_infected = m.betta * m.K_mean * m.I\nm.R += m.mu * m.I\nm.I += m.E * m.eta - m.I * m.mu\nm.E += m.S * p_infected - m.E * m.eta\nm.S -= m.S * p_infected\nSeirModel.evolve = evolve\n</code></pre></p> <p>Once the model is defined and the evolution function is set we can create a trajectory of the model. We can set specific values for the random parameters as follows:</p> <p><pre><code>sample, sample_params = gcm.util.get_model_sample_trajectory(\nSeirModel, \n**{\"betta\": 0.2, \"Io\":6e-5}\n)\n</code></pre> Plotting the <code>sample</code> yields:</p> <p><pre><code>import matplotlib.pyplot as plt\nplt.plot(sample[SeirModel.compartment_name_to_index[\"S\"]], 'green')\nplt.plot(sample[SeirModel.compartment_name_to_index[\"E\"]], 'red')\nplt.plot(sample[SeirModel.compartment_name_to_index[\"I\"]], 'orange')\nplt.plot(sample[SeirModel.compartment_name_to_index[\"R\"]], 'brown')\nplt.show()\n</code></pre> </p> <p>Now we can use the <code>sample</code> and try to infer the values of \\(\\beta\\) and \\(Io\\). </p> <p><pre><code>SeirModel.run(sample[SeirModel.compartment_name_to_index[\"R\"]], \"seir.data\")\n</code></pre> The results are save in the <code>seir.data</code> file. We load them, compute the weights and the percentiles <code>30</code> and <code>70</code> with: <pre><code>results = gcm.util.load_parameters(\"seir.data\")\nweights = numpy.exp(-results[0]/numpy.min(results[0]))\npercentiles = gcm.util.get_percentiles_from_results(SeirModel, results, 30, 70)\n</code></pre></p> <p>Finally plot the reference values with the percentiles and histograms for the parameters  \\(\\beta\\) and \\(Io\\) (the red line indicates the value used for the reference): <pre><code>plt.figure()\nplt.fill_between(numpy.arange(percentiles.shape[2]), percentiles[0,0], percentiles[0,2], alpha=0.3)\nplt.plot(sample[SeirModel.compartment_name_to_index[\"R\"]], 'black')\nplt.plot(numpy.arange(percentiles.shape[2]), percentiles[0,1], '--', color='purple')\nfig, *axes = plt.subplots(1, len(results)-1)\nfor i, ax in enumerate(axes[0], 1):\nax.hist(results[i], weights=weights)\nax.vlines(sample_params[i-1], *ax.get_ylim(), 'red')\nplt.show()\n</code></pre> </p>"},{"location":"examples/SIR/","title":"SIR","text":"<p>For a more in-depth example check the Jupiter notebook with the same name, or check out https://github.com/QuanticPony/compartmental/blob/master/examples/sir.ipynb</p> \\[ \\begin{align}     \\nonumber \\dot{S} &amp;= -\\beta \\langle k \\rangle \\frac{I}{N}S. \\\\     \\nonumber \\dot{I} &amp;= \\beta \\langle k \\rangle \\frac{I}{N}S - \\mu I. \\\\     \\nonumber \\dot{R} &amp;= \\mu I. \\end{align} \\] <pre><code>sir_model = {\n\"simulation\": {\n\"n_simulations\": 100000,\n\"n_executions\": 1,\n\"n_steps\": 130\n},\n\"compartments\": {\n\"S\": { \"initial_value\": 1,\n\"minus_compartments\": \"I\"\n},\n\"I\": { \"initial_value\": \"Io\",\n},\n\"R\": { \"initial_value\": 0 },\n},\n\"params\": {\n\"betta\": {\n\"min\": 0.1,\n\"max\": 0.4\n},\n\"mu\": {\n\"min\": 0.01,\n\"max\": 0.2\n},\n\"Io\": {\n\"min\": 1e-6,\n\"max\": 1e-4\n}\n},\n\"fixed_params\": {\n\"K_mean\": 1\n},\n\"reference\": {\n\"compartments\" : [\"R\"]\n},\n\"results\": {\n\"save_percentage\": 0.1\n}\n}\n</code></pre> <p>Now we need to define the evolution function of the system and assign it to the model: <pre><code>import compartmental as gcm\ngcm.use_numpy()\nSirModel = gcm.GenericModel(sir_model)\ndef evolve(m, *args, **kargs):\np_infected = m.betta * m.K_mean * m.I\nm.R += m.mu * m.I\nm.I += m.S * p_infected - m.I * m.mu\nm.S -= m.S * p_infected\nSirModel.evolve = evolve\n</code></pre></p> <p>Once the model is defined and the evolution function is set we can create a trajectory of the model. We can set specific values for the random parameters as follows:</p> <pre><code>sample, sample_params = gcm.util.get_model_sample_trajectory(SirModel, **{\"betta\":0.2, \"mu\":0.08, \"Io\": 1e-5})\n</code></pre> <p>Now we apply the automatic adjustment of the model. Keep in mind it will only work if the initial ranges of the <code>params</code> are set close to the optimal values. <pre><code>for i in range(7):\nSirModel.run(sample[SirModel.compartment_name_to_index[\"R\"]], f\"sir_temp{i}.data\")\nresults = gcm.util.load_parameters(f\"sir_temp{i}.data\")\ngcm.util.auto_adjust_model_params(SirModel, results)\n</code></pre></p> <p>Finally we run the model once again to get the final photo: <pre><code>SirModel.run(sample[SirModel.compartment_name_to_index[\"R\"]], \"sir.data\")\nresults = gcm.util.load_parameters(\"sir.data\")\n</code></pre></p>  Not adjusted           With automatic adjustment          <p>Code used for the plots:</p> <pre><code>weights = numpy.exp(-results[0]/numpy.min(results[0]))\npercentiles = gcm.util.get_percentiles_from_results(SirModel, results, 30, 70)\ntry:\n# In case cupy is used\npercentiles = percentiles.get()\nsample = sample.get()\nweights = weights.get()\nresults = results.get()\nsample_params = sample_params.get()\nexcept AttributeError:\npass\nplt.figure()\nplt.fill_between(numpy.arange(percentiles.shape[2]), percentiles[0,0], percentiles[0,2], alpha=0.3)\nplt.plot(sample[SirModel.compartment_name_to_index[\"S\"]], 'green')\nplt.plot(sample[SirModel.compartment_name_to_index[\"I\"]], 'orange')\nplt.plot(sample[SirModel.compartment_name_to_index[\"R\"]], 'brown')\nplt.plot(numpy.arange(percentiles.shape[2]), percentiles[0,1], '--', color='purple')\nfig, *axes = plt.subplots(1, len(results)-1)\nfor i, ax in enumerate(axes[0], 1):\nax.hist(results[i], weights=weights)\nax.vlines(sample_params[i-1], *ax.get_ylim(), 'red')\nplt.show()\n</code></pre>"},{"location":"reference/compartmental/generic_model/","title":"Generic model","text":""},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel","title":"<code>GenericModel</code>","text":"<p>Creates a compartmental model from a dictionary and setting an <code>evolve</code> method.</p> Source code in <code>compartmental/generic_model.py</code> <pre><code>class GenericModel:\n\"\"\"Creates a compartmental model from a dictionary and setting an `evolve` method.\n    \"\"\"\ndef get_all_params_names(self):\n\"\"\"Returns a set of all parameters names, fixed or not.\n        Returns:\n            (set[str]): Set of all parameters names.\n        \"\"\"\nreturn set(list(self.param_to_index.keys()) + list(self.fixed_param_to_index.keys()))\ndef __init__(self, configuration: dict[str, Any]):\n\"\"\"Creates a model from the configuration given.\n        Args:\n            configuration (dict[str, Any]): Model configuration.\n        \"\"\"\nself.configuration: dict[str, Any] = copy.deepcopy(configuration)\nself.param_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"params\"].keys()) }\nself.fixed_param_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"fixed_params\"].keys()) }\nself.compartment_name_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"compartments\"].keys()) }\ndef populate_model_parameters(self, **kargs):\n\"\"\"Populates params array. Assigns shortcuts to call them by their name as an attribute.\n        \"\"\"\nparameter_manager = ParametersManager(self.configuration, self)\nREFERENCE_OFFSET = self.configuration[\"reference\"].get(\"offset\", 0)\n# Set offset value if it is a str reference\nif isinstance(REFERENCE_OFFSET, str):\nself.configuration[\"params\"][REFERENCE_OFFSET].update({\"type\":\"int\"})\nparameter_manager.populate_params(**kargs)\nparameter_manager.populate_fixed_params()\nfor param in self.configuration[\"params\"].keys():\nsetattr(self, param, self.params[param])\nfor fparam in self.configuration[\"fixed_params\"].keys():\nsetattr(self, fparam, self.fixed_params[self.fixed_param_to_index[fparam]])\nif isinstance(REFERENCE_OFFSET, str):\nself.reference_offset = self.params[REFERENCE_OFFSET]\nelse:\nself.reference_offset = 0\ndef populate_model_compartments(self, **kargs):\n\"\"\"Populates compartments array. Assigns shortcuts to call them by their name as an attribute.\n        \"\"\"\nN_SIMULATIONS = self.configuration[\"simulation\"][\"n_simulations\"]\nself.state = CNP.zeros(\n(len(self.configuration[\"compartments\"]), N_SIMULATIONS), dtype=CNP.float64\n)\nself.log_diff = CNP.zeros((N_SIMULATIONS, 1), dtype=CNP.float64)\nfor c,i in self.compartment_name_to_index.items():\nC = self.configuration[\"compartments\"][c]\ninitial_value = C[\"initial_value\"]\nif isinstance(initial_value, str):\nif initial_value in self.param_to_index.keys():\nself.state[i,:] = self.params[initial_value]\ncontinue\nself.state[i,:] = initial_value\nfor c,i in self.compartment_name_to_index.items():\nC = self.configuration[\"compartments\"][c]\nminus = C.get(\"minus_compartments\", False)\nif not minus:\ncontinue\nif not isinstance(minus, list):\nminus = [minus]\nfor m in minus:\nself.state[i,:] -= self.state[self.compartment_name_to_index[m],:]\nfor comp in self.configuration[\"compartments\"].keys():\nsetattr(self, comp, self.state[self.compartment_name_to_index[comp]])\ndef evolve(self, step, *args, **kargs):\n\"\"\"This method must be overwritten to complete the model initialization.\n        Args:\n            step (int): Step of simulation. Simulation ends when `step = simulation.n_steps`\n        \"\"\"\n...\ndef get_diff(self, step, reference, reference_mask):\n\"\"\"Returns a value that represents the distance from the simulation to the reference.\n        This function can be overwritten if other deffinition os distance is needed.\n        Args:\n            step (int): Step of simulation. Simulation ends when `step = simulation.n_steps`\n            reference (list[list[float]]): Reference(s) values.\n            reference_mask (list[int]): Mask to obtain simulation values to compare with the reference(s). \n        Returns:\n            (list[float]): Distance from simulations to reference(s).\n        \"\"\"\nindex = step + self.reference_offset\n# To only take the diff on the same range for all simulations\ndiff = CNP.absolute(CNP.take(self.state, reference_mask, 0)[0].T-reference[CNP.clip(index, 0, self.N_STEPS-1)]) * \\\n               ((self.reference_offset.max()&lt;=index) * (index&lt;=self.N_STEPS))\nreturn CNP.log(diff + 1)\ndef _internal_run_(self, inner, inner_args: list, outer, outer_args:list,  reference, save_file:str, *args, exclude_pupulate:bool=False, **kargs):\n\"\"\"Internal function that executes the model.\n        Args:\n            inner (function): Function to call in the main loop.\n            inner_args (list): Args given to `inner`.\n            outer (function): Function to call after the main loop.\n            outer_args (list): Args given to `outer`.\n            reference (list[list[float]]): Reference values used to compare with the simulation.\n            save_file (str): Filename of path to file.\n            exclude_populate (bool, optional): If `False` params and compartments are populated with random values. Defaults to False.\n        \"\"\"\nN_EXECUTIONS = self.configuration[\"simulation\"][\"n_executions\"]\nself.N_STEPS = self.configuration[\"simulation\"][\"n_steps\"]\nfor execution in range(N_EXECUTIONS):\nprogress_bar(f\"Model running: \", execution, N_EXECUTIONS, len=min(20, max(N_EXECUTIONS,5)))\nif not exclude_pupulate:\nself.populate_model_parameters(**kargs)\nself.populate_model_compartments(**kargs)\nself._min_offset_: int = self.reference_offset.min()\nself.log_diff[:] = 0\n# for step in range(self.N_STEPS):\nstep = CNP.int64(0)\nwhile (self.reference_offset + step &lt; self.N_STEPS).any():\ninner(self, step, reference, *inner_args, **kargs)\nstep += 1\nouter(self, *outer_args, execution_number=execution, **kargs)\nprogress_bar(f\"Model running: \", N_EXECUTIONS, N_EXECUTIONS, len=min(20, max(N_EXECUTIONS,5)), end='\\n')\ndef run_no_diff(self, save_file: str, *args, **kargs):\n\"\"\"Runs the model without computing the diference any reference(s).\n        Args:\n            save_file (str): Filename of path to file.\n        \"\"\"\nself._internal_run_(\nself.evolve, args, \nsave_parameters_no_diff, (save_file, self.param_to_index.keys(),  self.params), \nNone, save_file,\n*args, **kargs\n)\ndef run(self, reference, save_file: str, *args, **kargs):\n\"\"\"Runs the model computing the diference from the reference(s).\n        Args:\n            reference (list[list[float]]): Reference(s) values.\n            save_file (str): Filename of path to file.\n        \"\"\"\nreference_mask = CNP.array([self.compartment_name_to_index[c] for c in self.configuration[\"reference\"][\"compartments\"]])\ndef inner(model, step, reference, reference_mask, *args, **kargs):\nmodel.evolve(model, step, *args, **kargs)\nself.log_diff[:,0] += model.get_diff(step, reference, reference_mask)\ndef outer(model, save_file, *args, execution_number, **kargs):\nbest_params, best_log_diff = get_best_parameters(model.params, model.log_diff, model.configuration[\"results\"][\"save_percentage\"])\nsave_parameters(save_file, model.param_to_index.keys(), best_params, best_log_diff, execution_number=execution_number)\nself._internal_run_(\ninner, (reference_mask, *args), \nouter, (save_file,), \nreference, save_file, \n*args, **kargs\n)\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.__init__","title":"<code>__init__(configuration)</code>","text":"<p>Creates a model from the configuration given.</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>dict[str, Any]</code> <p>Model configuration.</p> required Source code in <code>compartmental/generic_model.py</code> <pre><code>def __init__(self, configuration: dict[str, Any]):\n\"\"\"Creates a model from the configuration given.\n    Args:\n        configuration (dict[str, Any]): Model configuration.\n    \"\"\"\nself.configuration: dict[str, Any] = copy.deepcopy(configuration)\nself.param_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"params\"].keys()) }\nself.fixed_param_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"fixed_params\"].keys()) }\nself.compartment_name_to_index: dict[str, int] = { k:i for i,k in enumerate(self.configuration[\"compartments\"].keys()) }\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.evolve","title":"<code>evolve(step, *args, **kargs)</code>","text":"<p>This method must be overwritten to complete the model initialization.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>int</code> <p>Step of simulation. Simulation ends when <code>step = simulation.n_steps</code></p> required Source code in <code>compartmental/generic_model.py</code> <pre><code>def evolve(self, step, *args, **kargs):\n\"\"\"This method must be overwritten to complete the model initialization.\n    Args:\n        step (int): Step of simulation. Simulation ends when `step = simulation.n_steps`\n    \"\"\"\n...\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.get_all_params_names","title":"<code>get_all_params_names()</code>","text":"<p>Returns a set of all parameters names, fixed or not.</p> <p>Returns:</p> Type Description <code>set[str]</code> <p>Set of all parameters names.</p> Source code in <code>compartmental/generic_model.py</code> <pre><code>def get_all_params_names(self):\n\"\"\"Returns a set of all parameters names, fixed or not.\n    Returns:\n        (set[str]): Set of all parameters names.\n    \"\"\"\nreturn set(list(self.param_to_index.keys()) + list(self.fixed_param_to_index.keys()))\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.get_diff","title":"<code>get_diff(step, reference, reference_mask)</code>","text":"<p>Returns a value that represents the distance from the simulation to the reference. This function can be overwritten if other deffinition os distance is needed.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>int</code> <p>Step of simulation. Simulation ends when <code>step = simulation.n_steps</code></p> required <code>reference</code> <code>list[list[float]]</code> <p>Reference(s) values.</p> required <code>reference_mask</code> <code>list[int]</code> <p>Mask to obtain simulation values to compare with the reference(s). </p> required <p>Returns:</p> Type Description <code>list[float]</code> <p>Distance from simulations to reference(s).</p> Source code in <code>compartmental/generic_model.py</code> <pre><code>def get_diff(self, step, reference, reference_mask):\n\"\"\"Returns a value that represents the distance from the simulation to the reference.\n    This function can be overwritten if other deffinition os distance is needed.\n    Args:\n        step (int): Step of simulation. Simulation ends when `step = simulation.n_steps`\n        reference (list[list[float]]): Reference(s) values.\n        reference_mask (list[int]): Mask to obtain simulation values to compare with the reference(s). \n    Returns:\n        (list[float]): Distance from simulations to reference(s).\n    \"\"\"\nindex = step + self.reference_offset\n# To only take the diff on the same range for all simulations\ndiff = CNP.absolute(CNP.take(self.state, reference_mask, 0)[0].T-reference[CNP.clip(index, 0, self.N_STEPS-1)]) * \\\n           ((self.reference_offset.max()&lt;=index) * (index&lt;=self.N_STEPS))\nreturn CNP.log(diff + 1)\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.populate_model_compartments","title":"<code>populate_model_compartments(**kargs)</code>","text":"<p>Populates compartments array. Assigns shortcuts to call them by their name as an attribute.</p> Source code in <code>compartmental/generic_model.py</code> <pre><code>def populate_model_compartments(self, **kargs):\n\"\"\"Populates compartments array. Assigns shortcuts to call them by their name as an attribute.\n    \"\"\"\nN_SIMULATIONS = self.configuration[\"simulation\"][\"n_simulations\"]\nself.state = CNP.zeros(\n(len(self.configuration[\"compartments\"]), N_SIMULATIONS), dtype=CNP.float64\n)\nself.log_diff = CNP.zeros((N_SIMULATIONS, 1), dtype=CNP.float64)\nfor c,i in self.compartment_name_to_index.items():\nC = self.configuration[\"compartments\"][c]\ninitial_value = C[\"initial_value\"]\nif isinstance(initial_value, str):\nif initial_value in self.param_to_index.keys():\nself.state[i,:] = self.params[initial_value]\ncontinue\nself.state[i,:] = initial_value\nfor c,i in self.compartment_name_to_index.items():\nC = self.configuration[\"compartments\"][c]\nminus = C.get(\"minus_compartments\", False)\nif not minus:\ncontinue\nif not isinstance(minus, list):\nminus = [minus]\nfor m in minus:\nself.state[i,:] -= self.state[self.compartment_name_to_index[m],:]\nfor comp in self.configuration[\"compartments\"].keys():\nsetattr(self, comp, self.state[self.compartment_name_to_index[comp]])\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.populate_model_parameters","title":"<code>populate_model_parameters(**kargs)</code>","text":"<p>Populates params array. Assigns shortcuts to call them by their name as an attribute.</p> Source code in <code>compartmental/generic_model.py</code> <pre><code>def populate_model_parameters(self, **kargs):\n\"\"\"Populates params array. Assigns shortcuts to call them by their name as an attribute.\n    \"\"\"\nparameter_manager = ParametersManager(self.configuration, self)\nREFERENCE_OFFSET = self.configuration[\"reference\"].get(\"offset\", 0)\n# Set offset value if it is a str reference\nif isinstance(REFERENCE_OFFSET, str):\nself.configuration[\"params\"][REFERENCE_OFFSET].update({\"type\":\"int\"})\nparameter_manager.populate_params(**kargs)\nparameter_manager.populate_fixed_params()\nfor param in self.configuration[\"params\"].keys():\nsetattr(self, param, self.params[param])\nfor fparam in self.configuration[\"fixed_params\"].keys():\nsetattr(self, fparam, self.fixed_params[self.fixed_param_to_index[fparam]])\nif isinstance(REFERENCE_OFFSET, str):\nself.reference_offset = self.params[REFERENCE_OFFSET]\nelse:\nself.reference_offset = 0\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.run","title":"<code>run(reference, save_file, *args, **kargs)</code>","text":"<p>Runs the model computing the diference from the reference(s).</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>list[list[float]]</code> <p>Reference(s) values.</p> required <code>save_file</code> <code>str</code> <p>Filename of path to file.</p> required Source code in <code>compartmental/generic_model.py</code> <pre><code>def run(self, reference, save_file: str, *args, **kargs):\n\"\"\"Runs the model computing the diference from the reference(s).\n    Args:\n        reference (list[list[float]]): Reference(s) values.\n        save_file (str): Filename of path to file.\n    \"\"\"\nreference_mask = CNP.array([self.compartment_name_to_index[c] for c in self.configuration[\"reference\"][\"compartments\"]])\ndef inner(model, step, reference, reference_mask, *args, **kargs):\nmodel.evolve(model, step, *args, **kargs)\nself.log_diff[:,0] += model.get_diff(step, reference, reference_mask)\ndef outer(model, save_file, *args, execution_number, **kargs):\nbest_params, best_log_diff = get_best_parameters(model.params, model.log_diff, model.configuration[\"results\"][\"save_percentage\"])\nsave_parameters(save_file, model.param_to_index.keys(), best_params, best_log_diff, execution_number=execution_number)\nself._internal_run_(\ninner, (reference_mask, *args), \nouter, (save_file,), \nreference, save_file, \n*args, **kargs\n)\n</code></pre>"},{"location":"reference/compartmental/generic_model/#compartmental.generic_model.GenericModel.run_no_diff","title":"<code>run_no_diff(save_file, *args, **kargs)</code>","text":"<p>Runs the model without computing the diference any reference(s).</p> <p>Parameters:</p> Name Type Description Default <code>save_file</code> <code>str</code> <p>Filename of path to file.</p> required Source code in <code>compartmental/generic_model.py</code> <pre><code>def run_no_diff(self, save_file: str, *args, **kargs):\n\"\"\"Runs the model without computing the diference any reference(s).\n    Args:\n        save_file (str): Filename of path to file.\n    \"\"\"\nself._internal_run_(\nself.evolve, args, \nsave_parameters_no_diff, (save_file, self.param_to_index.keys(),  self.params), \nNone, save_file,\n*args, **kargs\n)\n</code></pre>"},{"location":"reference/compartmental/util/","title":"Util","text":""},{"location":"reference/compartmental/util/#compartmental.util.auto_adjust_model_params","title":"<code>auto_adjust_model_params(model, results, weights=None, params=None)</code>","text":"<p>Adjusts limits of model params. If <code>params</code> is specified only those are adjusted.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>GenericModel</code> <p>Model to optimize.</p> required <code>results</code> <code>list[list[float]]</code> <p>Results from running the model.</p> required <code>weights</code> <code>list[float]</code> <p>Results weights. Defaults to None.</p> <code>None</code> <code>params</code> <code>list[str]</code> <p>Names of params to optimice. Defaults to None.</p> <code>None</code> Source code in <code>compartmental/util.py</code> <pre><code>def auto_adjust_model_params(model: GenericModel, results, weights=None, params=None):\n\"\"\"Adjusts limits of model params. If `params` is specified only those are adjusted.\n    Args:\n        model (GenericModel): Model to optimize.\n        results (list[list[float]]): Results from running the model.\n        weights (list[float], optional): Results weights. Defaults to None.\n        params (list[str], optional): Names of params to optimice. Defaults to None.\n    \"\"\"\nif weights is not None:\npercentile = lambda x,p: weighted_quantile(x, p, weights, False, False)\nelse:\npercentile = lambda x,p: CNP.percentile(x, p)\nfor c, i in model.param_to_index.items():\nif isinstance(params, list):\nif isinstance(params[0], str):\nif c not in params:\ncontinue\naux = CNP.sort(results[i+1])\n_5 = percentile(aux, 5)\n_50 = percentile(aux, 50)\n_95 =percentile(aux, 95)\nM:dict = model.configuration[\"params\"][c]\ndistm = _50 - _5\ndistM = _95 - _50\nTYPE = M.get(\"type\", \"float64\")\nif \"int\" in TYPE:\nMIN = _5 - 1 \nMAX = _95 + 1\nelse :\nMIN = _5 * 0.5\nMAX = _95 * 2\nmin_probable_value = _5 - distM if distM != 0 else MAX\nmax_probable_value = _95 + distm if distm != 0 else MIN\n# print(f\"\"\"{c}:\n#     min: {min_probable_value},\\t {0.9 * (M[\"min\"]*4+_5)/5},\\t {M.get(\"min_limit\", None)}\n#     max: {max_probable_value},\\t {1.1 * (M[\"max\"]*4+_95)/5},\\t {M.get(\"max_limit\", None)}\n#     \"\"\")\n# TODO: make a gaussian kernel to infer when probability is 0 and assing as min or max\nMAX = M.get(\"max_limit\", None)\nMIN = M.get(\"min_limit\", None)\nif (MAX is not None) or (MIN is not None):\nmodel.configuration[\"params\"][c].update({\n\"min\" : CNP.clip(min(min_probable_value, 0.9 * (M[\"min\"]*2+_5)/3), MIN, MAX),\n\"max\" : CNP.clip(max(max_probable_value, 1.1 * (M[\"max\"]*2+_95)/3), MIN, MAX)\n})\nelse:\nmodel.configuration[\"params\"][c].update({\n\"min\" :min(min_probable_value, 0.9 * (M[\"min\"]*2+_5)/3),\n\"max\" :max(max_probable_value, 1.1 * (M[\"max\"]*2+_95)/3)\n})\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.get_best_parameters","title":"<code>get_best_parameters(params, log_diff, save_percentage)</code>","text":"<p>Retuns the best <code>save_percentage</code>% <code>params</code> of the simulations given their <code>log_diff</code> with real data.</p> Source code in <code>compartmental/util.py</code> <pre><code>def get_best_parameters(params, log_diff, save_percentage):\n\"Retuns the best `save_percentage`% `params` of the simulations given their `log_diff` with real data.\" \nsave_count: int = ceil(log_diff.size*save_percentage*0.01)\nsaved_params = CNP.zeros((save_count, 1), dtype=params.dtype)\nsaved_log_diff = CNP.zeros((save_count, 1), dtype=CNP.float64)\nif save_count == log_diff.size:\nlog_diff_index_sorted = CNP.argsort(log_diff, 0)\nelse:\nlog_diff_index_sorted = CNP.argpartition(log_diff, save_count, 0)[0:save_count]\nsaved_params[:] = CNP.take(params, log_diff_index_sorted)\nsaved_log_diff[:] = CNP.take(log_diff, log_diff_index_sorted)\nreturn saved_params, saved_log_diff\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.get_model_sample_trajectory","title":"<code>get_model_sample_trajectory(model, *args, **kargs)</code>","text":"<p>Executes the model with <code>n_simulations = 1</code> and <code>n_executions = 1</code>. Returns all the intermediate states and the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>GenericModel</code> <p>Model to execute.</p> required <p>Returns:</p> Type Description <code>list[list[float]], list[list[float]]</code> <p>Tuple of all states history and corresponding params.</p> Source code in <code>compartmental/util.py</code> <pre><code>def get_model_sample_trajectory(model: GenericModel, *args, **kargs):\n\"\"\"Executes the model with `n_simulations = 1` and `n_executions = 1`.\n    Returns all the intermediate states and the parameters.\n    Args:\n        model (GenericModel): Model to execute.\n    Returns:\n        (list[list[float]], list[list[float]]): Tuple of all states history and corresponding params.\n    \"\"\"\nreference_mask = CNP.array([model.compartment_name_to_index[c] for c in model.configuration[\"reference\"][\"compartments\"]])\nconfiguration = copy.deepcopy(model.configuration)\nfrom . import GenericModel\ninner_model = GenericModel(configuration)\ninner_model.evolve = model.evolve\ninner_model.configuration[\"simulation\"][\"n_simulations\"] = 1\ninner_model.configuration[\"simulation\"][\"n_executions\"] = 1\ninner_model.populate_model_parameters(**kargs)\ninner_model.populate_model_compartments(**kargs)\nsaved_state = CNP.zeros((inner_model.configuration[\"simulation\"][\"n_steps\"], inner_model.state.shape[0]))\ndef inner(_model_, step, reference, reference_mask, *args, **kargs):\n_model_.evolve(_model_, step, *args, **kargs)\nsaved_state[step] = _model_.state[:, 0]\ndef outer(_model_, *args, **kargs):\n...\ninner_model._internal_run_(\ninner, (reference_mask, *args), \nouter, (), \nNone, None,\n*args, exclude_pupulate=True, **kargs\n)\noffset_array(saved_state, inner_model.reference_offset[0])\nreturn saved_state.T, inner_model.params[0]\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.get_model_sample_trajectory_with_diff_to_reference","title":"<code>get_model_sample_trajectory_with_diff_to_reference(model, reference, *args, **kargs)</code>","text":"<p>Executes the model with <code>n_simulations = 1</code> and <code>n_executions = 1</code>. Returns all the intermediate states and the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>GenericModel</code> <p>Model to execute.</p> required <code>reference</code> <code>list</code> <p>Reference to compare with.</p> required <p>Returns:</p> Type Description <code>list[list[float]], list[list[float]], float</code> <p>Tuple of all states history and corresponding params and the difference.</p> Source code in <code>compartmental/util.py</code> <pre><code>def get_model_sample_trajectory_with_diff_to_reference(model: GenericModel, reference, *args, **kargs):\n\"\"\"Executes the model with `n_simulations = 1` and `n_executions = 1`.\n    Returns all the intermediate states and the parameters.\n    Args:\n        model (GenericModel): Model to execute.\n        reference (list): Reference to compare with.\n    Returns:\n        (list[list[float]], list[list[float]], float): Tuple of all states history and corresponding params and the difference.\n    \"\"\"\nreference_mask = CNP.array([model.compartment_name_to_index[c] for c in model.configuration[\"reference\"][\"compartments\"]])\nconfiguration = copy.deepcopy(model.configuration)\nfrom . import GenericModel\ninner_model = GenericModel(configuration)\ninner_model.evolve = model.evolve\nreference_mask = CNP.array([inner_model.compartment_name_to_index[c] for c in inner_model.configuration[\"reference\"][\"compartments\"]])\ninner_model.configuration[\"simulation\"][\"n_simulations\"] = 1\ninner_model.configuration[\"simulation\"][\"n_executions\"] = 1\ninner_model.N_STEPS = inner_model.configuration[\"simulation\"][\"n_steps\"]\ninner_model.populate_model_parameters(**kargs)\ninner_model.populate_model_compartments(**kargs)\nsaved_state = CNP.zeros((inner_model.configuration[\"simulation\"][\"n_steps\"], inner_model.state.shape[0]))\nlog_diff = CNP.zeros((1))\ndef inner(_model_, step, reference, reference_mask, *args, **kargs):\n_model_.evolve(_model_, step, *args, **kargs)\nlog_diff[0] += inner_model.get_diff(step, reference, reference_mask)[0]\nsaved_state[step] = _model_.state[:, 0]\ndef outer(_model_, *args, **kargs):\n...\ninner_model._internal_run_(\ninner, (reference_mask, *args), \nouter, (), \nreference, None,\n*args, exclude_pupulate=True, **kargs\n)\noffset_array(saved_state, inner_model.reference_offset[0])\nreturn saved_state.T, inner_model.params[0], log_diff\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.get_percentiles_from_results","title":"<code>get_percentiles_from_results(model, results, p_minor=5, p_max=95, weights=None, *args, **kargs)</code>","text":"<p>Returns an array of percentils <code>p_minor=5</code>, median and <code>p_max=95</code> of the given model and results.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>GenericModel</code> <p>Model used to generate the <code>results</code>.</p> required <code>results</code> <code>list[list[float]]</code> <p>Result parameters of <code>model</code> execution.</p> required <code>p_minor</code> <code>int</code> <p>Smaller percentile. Defaults to 5.</p> <code>5</code> <code>p_max</code> <code>int</code> <p>Bigger percentile. Defaults to 95.</p> <code>95</code> <code>weights</code> <code>list[float] | None</code> <p>Results weights. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[int, int, list[float]]</code> <p>First index represents the reference defined in <code>reference.compartments</code>.             Second index represents  <code>p_minor</code>, median or <code>p_max=</code>. Final represents the step in the simulation.</p> Source code in <code>compartmental/util.py</code> <pre><code>def get_percentiles_from_results(model: GenericModel, results, p_minor=5, p_max=95, weights=None, *args, **kargs):\n\"\"\"Returns an array of percentils `p_minor=5`, median and `p_max=95` of the given model and results.\n    Args:\n        model (GenericModel): Model used to generate the `results`.\n        results (list[list[float]]): Result parameters of `model` execution.\n        p_minor (int, optional): Smaller percentile. Defaults to 5.\n        p_max (int, optional): Bigger percentile. Defaults to 95.\n        weights (list[float]|None): Results weights. Defaults to None.\n    Returns:\n        (list[int, int, list[float]]): First index represents the reference defined in `reference.compartments`. \\\n            Second index represents  `p_minor`, median or `p_max=`. Final represents the step in the simulation.\n    \"\"\"\nreference_mask = CNP.array([model.compartment_name_to_index[c] for c in model.configuration[\"reference\"][\"compartments\"]])\nresults_no_diff = results[1:]\nresults_percentiles = CNP.zeros((reference_mask.shape[0], 3, model.configuration[\"simulation\"][\"n_steps\"]))\nprev_config = copy.deepcopy(model.configuration)\nconfiguration = copy.deepcopy(model.configuration)\nconfiguration[\"simulation\"][\"n_simulations\"] = results.shape[1]\nconfiguration[\"simulation\"][\"n_executions\"] = 1\nfrom . import GenericModel\ninner_model = GenericModel(configuration)\ninner_model.evolve = model.evolve\ninner_model.populate_model_parameters(**kargs)\nfor k in inner_model.params.dtype.names:\ninner_model.params[k][:] = results_no_diff[inner_model.param_to_index[k]]\ninner_model.populate_model_compartments(**kargs)\nstorage = CNP.zeros((configuration[\"simulation\"][\"n_steps\"], configuration[\"simulation\"][\"n_simulations\"]))\n_range = CNP.arange(configuration[\"simulation\"][\"n_simulations\"])\ndef inner(_model_, step, reference, reference_mask, *args, **kargs):\n_model_.evolve(_model_, step, *args, **kargs)\naux = CNP.take(_model_.state, reference_mask, 0)\n# TODO: improve this so that storage is not bigger than (offset.max - offset.min, n_simulations) \n# This line is a bit complex, what it does:\n# Save in the storage at the correct time for each simulation the values of the aux (=values of state to compare with reference) \n# in the same order so that each simulation is treated independently until all simulations stop\nstorage[CNP.clip(_model_.reference_offset + step, 0, _model_.configuration[\"simulation\"][\"n_steps\"]-1),\n_range] += aux[0][_range] * (_model_.reference_offset + step &lt; _model_.configuration[\"simulation\"][\"n_steps\"])\ndef outer(_model_, *args, **kargs):\n...\ninner_model._internal_run_(\ninner, (reference_mask, *args), \nouter, (), \nNone, None,\n*args, exclude_pupulate=True, **kargs\n)\nif weights is not None:\npercentile = lambda x,p: weighted_quantile(x, p, weights, False, False)\nelse:\npercentile = lambda x,p: CNP.percentile(x, p)\nfor step in range(model.configuration[\"simulation\"][\"n_steps\"]):\nsort = CNP.sort(storage[step])\nresults_percentiles[:, 0, step] += percentile(sort, p_minor)\nresults_percentiles[:, 1, step] += percentile(sort, 50)\nresults_percentiles[:, 2, step] += percentile(sort, p_max)\nreturn results_percentiles\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.get_trajecty_selector","title":"<code>get_trajecty_selector(model, results, weights, reference=None, *args, show_only_reference=False)</code>","text":"<p>Creates an interactive plot and histograms of results. When a histogram is clicked the value of that parameter changes to the selected value.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>GenericModel</code> <p>Model used for the trajectory.</p> required <code>results</code> <code>list[list[float]]</code> <p>Results from running the model.</p> required <code>weights</code> <code>list[float]</code> <p>Results weights. Defaults to None.</p> required <code>reference</code> <code>list[list[float]]</code> <p>If give, is printed to the trajectory. Defaults to None.</p> <code>None</code> <code>show_only_reference</code> <code>boolean</code> <p>If <code>True</code> only the values used to compare with the reference are ploted. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict[str, float]</code> <p>Dictionary with the manually selected params.</p> Source code in <code>compartmental/util.py</code> <pre><code>def get_trajecty_selector(model: GenericModel, results, weights, reference=None, *args, show_only_reference=False):\n\"\"\"Creates an interactive plot and histograms of results. When a histogram is clicked the value of\n    that parameter changes to the selected value.\n    Args:\n        model (GenericModel): Model used for the trajectory.\n        results (list[list[float]]): Results from running the model.\n        weights (list[float], optional): Results weights. Defaults to None.\n        reference (list[list[float]], optional): If give, is printed to the trajectory. Defaults to None.\n        show_only_reference (boolean, optional): If `True` only the values used to compare with the reference are ploted. Defaults to False.\n    Returns:\n        (dict[str, float]): Dictionary with the manually selected params.\n    \"\"\"\nprev_config = copy.deepcopy(model.configuration)\nfig_sample, ax_sample = plt.subplots()\n_range = CNP.arange(model.configuration[\"simulation\"][\"n_steps\"])\n# Params used for the trajectory are saved here. This is returned\nvalues = {}\ncompartments_ploted = []\nfig, *axes = plt.subplots(1, len(results)-1)\nfor (p, i), ax in zip(model.param_to_index.items(), axes[0]):\n_5, _50, _95 = weighted_quantile(results[i+1], [5, 50, 95], weights)\nax.set_xlabel(p)\nax.hist(results[i+1], weights=weights)\nxlim = ax.get_xlim()\nax.vlines(_5, *ax.get_ylim(), 'green')\nax.vlines(_50, *ax.get_ylim(), 'black')\nax.vlines(_95, *ax.get_ylim(), 'purple')\nline, _ = ax.plot([(_5+_50)/2,(_5+_50)/2 ],  ax.get_ylim(), 'red', ':')\nvalues.update({p:(_5+_50)/2})\n# Define a picker por the param ax\ndef picker_builder(param, vline):\ndef picker(self, event):\nx = event.xdata\n# Update values and vline xdata\nvalues.update({param:x})\nvline.set_xdata([x,x])\n# Update trajectory\ndata, diff = update()\nax.set_title(f\"diff={diff}\")\nfor compartment, line in zip(compartments_ploted, sample_lines):\nif show_only_reference and reference is None:\ncontinue\nelse:\nline.set_ydata(data[model.compartment_name_to_index[compartment]])\nfig_sample.canvas.draw_idle()\nfig.canvas.draw_idle()\nreturn True, {}\nreturn picker\nline.set_picker(picker_builder(p, line))\nax.set_xlim(xlim)\ndef update():\nsample, _, diff = get_model_sample_trajectory_with_diff_to_reference(model, reference, *args, **values)\nreturn sample, diff\nsample, diff = update()\nlist_of_sample_lines = []\ntry:\nif show_only_reference and reference is not None:\nfor k,i in model.compartment_name_to_index.items():\nif k in model.configuration[\"reference\"][\"compartments\"]:\ncompartments_ploted.append(k)\nlist_of_sample_lines.append(_range)\nlist_of_sample_lines.append(sample[i])\nlist_of_sample_lines.append('-')\nelse: \nraise KeyError\nexcept KeyError:\ncompartments_ploted = list(model.compartment_name_to_index.keys())\nfor s in sample:\nlist_of_sample_lines.append(_range)\nlist_of_sample_lines.append(s)\nlist_of_sample_lines.append('-')\nsample_lines = ax_sample.plot(*list_of_sample_lines)\nif reference is not None:\nax_sample.plot(_range, reference, ':', color='black')\nplt.show(block=True)\nmodel.configuration.update(prev_config)\nreturn values\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.load_parameters","title":"<code>load_parameters(file)</code>","text":"<p>Loads parameters from file with the same format as <code>save_parameters</code> and <code>save_parameters_no_diff</code>.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Filename or path to file.</p> required <p>Returns:</p> Type Description <code>list[list[float]]</code> <p>Parameters array. First index selects the column (parameter).</p> Source code in <code>compartmental/util.py</code> <pre><code>def load_parameters(file: str):\n\"\"\"Loads parameters from file with the same format as `save_parameters` and `save_parameters_no_diff`.\n    Args:\n        file (str): Filename or path to file.\n    Returns:\n        (list[list[float]]): Parameters array. First index selects the column (parameter).\n    \"\"\"\nwith open(file, 'r') as file_in:\nimport numpy as np\nresults = np.loadtxt(file_in, delimiter=',', skiprows=1).T\nreturn CNP.asarray(results)\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.offset_array","title":"<code>offset_array(array, offset)</code>","text":"<p>Offsets an array by the given amount.</p> <p>Parameters:</p> Name Type Description Default <code>array</code> <code>list</code> <p>array to be changed.</p> required <code>offset</code> <code>int</code> <p>offset to apply to the given array.</p> required Source code in <code>compartmental/util.py</code> <pre><code>def offset_array(array, offset):\n\"\"\"Offsets an array by the given amount.\n    Args:\n        array (list): array to be changed.\n        offset (int): offset to apply to the given array.\n    \"\"\"\nif (offset &gt; 0):\narray[offset:] = array[:-offset]\narray[:offset] = array[0]\nelif (offset &lt; 0):\narray[:offset] = array[-offset:]\narray[offset:] = array[offset-1]\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.progress_bar","title":"<code>progress_bar(prefix, progress, total, *, sufix='', end='\\r', len=10)</code>","text":"<p>Prints a progress bar on standar output.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Prefix to the progress bar.</p> required <code>progress</code> <code>int | float</code> <p>Progress value.</p> required <code>total</code> <code>int | float</code> <p>Total progess posible.</p> required <code>sufix</code> <code>str</code> <p>Sufix to the progess bar. Defaults to \"\".</p> <code>''</code> <code>end</code> <code>str</code> <p>End value, set to <code>\\n</code> at the end. Defaults to ' '.</p> <code>'\\r'</code> <code>len</code> <code>int</code> <p>Length of progress bar. Defaults to 10.</p> <code>10</code> Source code in <code>compartmental/util.py</code> <pre><code>def progress_bar(prefix, progress, total, *, sufix=\"\", end='\\r', len=10):\n\"\"\"Prints a progress bar on standar output.\n    Args:\n        prefix (str): Prefix to the progress bar.\n        progress (int|float): Progress value.\n        total (int|float): Total progess posible.\n        sufix (str, optional): Sufix to the progess bar. Defaults to \"\".\n        end (str, optional): End value, set to `\\\\n` at the end. Defaults to '\\r'.\n        len (int, optional): Length of progress bar. Defaults to 10.\n    \"\"\"\nper = len * progress/float(total)\nprint(f\"\\r{prefix} -&gt; ||{'\u25ae'*int(per) + '\u25af'*(len-int(per))} ||{per*100/len:.2f}%  {sufix}\", end=end)\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.save_parameters","title":"<code>save_parameters(file, params_names, params, log_diff, *, execution_number=0)</code>","text":"<p>Saves the parameters with the given names including the diff column.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Filename or path to file.</p> required <code>params_names</code> <code>list[str]</code> <p>Name of parameters.</p> required <code>params</code> <code>list[list[float]]</code> <p>Parameters array.</p> required <code>log_diff</code> <code>list[float]</code> <p>Diff array.</p> required <code>execution_number</code> <code>int</code> <p>Number of the execution. If <code>0</code> the header is printed. Defaults to 0.</p> <code>0</code> Source code in <code>compartmental/util.py</code> <pre><code>def save_parameters(file: str, params_names: list[str], params: list[list[float]], log_diff: list[float], *, execution_number=0):\n\"\"\"Saves the parameters with the given names including the diff column.\n    Args:\n        file (str): Filename or path to file.\n        params_names (list[str]): Name of parameters.\n        params (list[list[float]]): Parameters array.\n        log_diff (list[float]): Diff array.\n        execution_number (int, optional): Number of the execution. If `0` the header is printed. Defaults to 0.\n    \"\"\"\nwith open(file, 'a' if execution_number!=0 else 'w') as file_out:\n# TODO: check for cupy\n# import numpy as np\nimport regex as re\n# if np != CNP:\n#     np.savetxt(file_out, CNP.asnumpy(CNP.concatenate((log_diff, params), 1)) , delimiter=',', comments='', header=\",\".join([\"log_diff\", *params_names]) if execution_number==0 else \"\")\n# else:\n_log_diff = log_diff\n_params = params\n_log_diff = CNP.asarray(log_diff, dtype=[(\"log_diff\", CNP.float64)])\n_merged = CNP.zeros((_params.size,1), dtype=[*_log_diff.dtype.descr, *_params.dtype.descr])\n_merged[\"log_diff\"] = _log_diff\nfor k in _params.dtype.names:\n_merged[k] = _params[k]\nif execution_number==0:\nfile_out.write(\",\".join(_merged.dtype.names)+\"\\n\")\nelse:\nfile_out.write(\"\\n\")\nfile_out.write(re.sub(r\"\\[|\\]|\\(|\\)| \", \"\", CNP.array_str(_merged)))\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.save_parameters_no_diff","title":"<code>save_parameters_no_diff(file, params_names, params, *, execution_number=0)</code>","text":"<p>Saves the parameters with the given names without the diff column.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>str</code> <p>Filename or path to file.</p> required <code>params_names</code> <code>list[str]</code> <p>Name of parameters.</p> required <code>params</code> <code>list[list[float]]</code> <p>Parameters array.</p> required <code>execution_number</code> <code>int</code> <p>Number of the execution. If <code>0</code> the header is printed. Defaults to 0.</p> <code>0</code> Source code in <code>compartmental/util.py</code> <pre><code>def save_parameters_no_diff(file: str, params_names: list[str], params: list[list[float]], *, execution_number=0):\n\"\"\"Saves the parameters with the given names without the diff column.\n    Args:\n        file (str): Filename or path to file.\n        params_names (list[str]): Name of parameters.\n        params (list[list[float]]): Parameters array.\n        execution_number (int, optional): Number of the execution. If `0` the header is printed. Defaults to 0.\n    \"\"\"\nwith open(file, 'a' if execution_number!=0 else 'w') as file_out:\n# import numpy as np\n# if np != CNP:\n#     _params = CNP.asnumpy(params)\n# else:\n#     _params = params\n# np.savetxt(file_out, params.T, delimiter=',', comments='', header=\",\".join(params_names) if execution_number==0 else \"\")\nimport regex as re\n_merged = params\nfile_out.write(\",\".join(_merged.dtype.names)+\"\\n\")\nfile_out.write(re.sub(r\"\\[|\\]|\\(|\\)| \", \"\", CNP.array_str(_merged)))\n</code></pre>"},{"location":"reference/compartmental/util/#compartmental.util.weighted_quantile","title":"<code>weighted_quantile(values, quantiles, sample_weight=None, values_sorted=False, old_style=False)</code>","text":"<p>From: https://stackoverflow.com/a/29677616</p> <p>Very close to numpy.percentile, but supports weights. NOTE: quantiles should be in [0, 100]!</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>list[float]</code> <p>Array with data.</p> required <code>quantiles</code> <code>list[float]</code> <p>Array with many quantiles needed.</p> required <code>sample_weight</code> <code>list[float]</code> <p>Array of the same length as <code>array</code>. Defaults to None.</p> <code>None</code> <code>values_sorted</code> <code>bool</code> <p>If True, then will avoid sorting of initial array.</p> <code>False</code> <code>old_style</code> <code>bool</code> <p>If True, will correct output to be consistent with numpy.percentile.</p> <code>False</code> <p>Returns:</p> Type Description <code>list[float]</code> <p>Array with computed quantiles.</p> Source code in <code>compartmental/util.py</code> <pre><code>def weighted_quantile(values, quantiles, sample_weight=None, values_sorted=False, old_style=False):\n\"\"\"From: https://stackoverflow.com/a/29677616\n    Very close to numpy.percentile, but supports weights.\n    NOTE: quantiles should be in [0, 100]!\n    Args:\n        values (list[float]): Array with data.\n        quantiles (list[float]): Array with many quantiles needed.\n        sample_weight (list[float], optional): Array of the same length as `array`. Defaults to None.\n        values_sorted (bool): If True, then will avoid sorting of initial array.\n        old_style (bool): If True, will correct output to be consistent with numpy.percentile.\n    Returns:\n        (list[float]): Array with computed quantiles.\n    \"\"\"\nquantiles = CNP.array(quantiles, dtype=CNP.float64)\nquantiles /= 100.\nif sample_weight is None:\nsample_weight = CNP.ones(len(values))\nsample_weight = CNP.array(sample_weight)\nif not values_sorted:\nsorter = CNP.argsort(values)\nvalues = CNP.copy(values[sorter])\nsample_weight = sample_weight[sorter]\nweighted_quantiles = CNP.cumsum(sample_weight) - 0.5 * sample_weight\nif old_style:\n# To be convenient with numpy.percentile\nweighted_quantiles -= weighted_quantiles[0]\nweighted_quantiles /= weighted_quantiles[-1]\nelse:\nweighted_quantiles /= CNP.sum(sample_weight)\nreturn CNP.interp(quantiles, weighted_quantiles, values)\n</code></pre>"},{"location":"reference/compartmental/parameters/parameters_manager/","title":"Parameters manager","text":""},{"location":"reference/compartmental/parameters/parameters_manager/#compartmental.parameters.parameters_manager.ParametersManager","title":"<code>ParametersManager</code>","text":"<p>Class used in model parameter population.</p> Source code in <code>compartmental/parameters/parameters_manager.py</code> <pre><code>class ParametersManager:\n\"\"\"Class used in model parameter population.\n    \"\"\"\ndef __init__(self, configuration: dict[str, Any], model):\nself.configuration = configuration\nself.model = model\ndef populate_params(self, **kargs):\n\"\"\"Populates GenericModel.params array. If specific values are given in `kargs` those are used.\n        Raises:\n            Exception: If the model configuration could not fill all the array.\n        \"\"\"\ncounter = 0\ndtype = []\ndtype = [[]]*len(self.model.param_to_index)\nN_SIMULATIONS = self.model.configuration[\"simulation\"][\"n_simulations\"]\nfor param_name, param_config in self.configuration[\"params\"].items():\nparam_index = self.model.param_to_index.get(param_name)\nif param_index is not None:\nTYPE = param_config.get(\"type\", \"float64\")\nif TYPE == 'int':\ndtype[param_index] = (param_name, CNP.int64)\nif TYPE == 'float64':\ndtype[param_index] = (param_name, CNP.float64)\n# setattr(self.model, \"params\", CNP.zeros(\n#     (len(self.configuration[\"params\"]), N_SIMULATIONS), dtype=dtype\n# ))\nsetattr(self.model, \"params\", CNP.zeros(\n(N_SIMULATIONS), dtype=dtype\n))\nfor param_name, param_config in self.configuration[\"params\"].items():\ncounter += 1\nTYPE = param_config.get(\"type\", \"float64\")\nif value := kargs.get(param_name, False):\nself.model.params[param_name] = value\ncontinue\nif TYPE == 'int':\nself.model.params[param_name] = CNP.random.randint(\nparam_config[\"min\"], \nparam_config[\"max\"]+1, \nself.configuration[\"simulation\"][\"n_simulations\"])\nif TYPE == 'float64':\nself.model.params[param_name] = CNP.random.random(\nself.configuration[\"simulation\"][\"n_simulations\"]) \\\n                        * (param_config[\"max\"] - param_config[\"min\"]) \\\n                        + param_config[\"min\"]\nif counter &lt; len(self.model.param_to_index.keys()):\nraise Exception(\"Parameters array could not be correctly created with current options.\")\ndef populate_fixed_params(self, **kargs):\n\"\"\"Populates GenericModel.fixed_params with the configuration values.\n        If specific values are given in `kargs` those are used.\n        Raises:\n            Exception: If the model configuration could not fill all the array.\n        \"\"\"\nsetattr(self.model, \"fixed_params\", CNP.zeros(\n(len(self.configuration[\"fixed_params\"]), 1), dtype=CNP.float64\n))\ncounter = 0\nfor fparam_name, value in self.configuration[\"fixed_params\"].items():\nfparam_index = self.model.fixed_param_to_index.get(fparam_name)\nif fparam_index is not None:\ncounter += 1 \nself.model.fixed_params[fparam_index] = kargs.get(fparam_name, value)\nif counter &lt; len(self.model.fixed_param_to_index.keys()):\nraise Exception(\"Fixed parameters array could not be correctly created with current options.\")\n</code></pre>"},{"location":"reference/compartmental/parameters/parameters_manager/#compartmental.parameters.parameters_manager.ParametersManager.populate_fixed_params","title":"<code>populate_fixed_params(**kargs)</code>","text":"<p>Populates GenericModel.fixed_params with the configuration values. If specific values are given in <code>kargs</code> those are used.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the model configuration could not fill all the array.</p> Source code in <code>compartmental/parameters/parameters_manager.py</code> <pre><code>def populate_fixed_params(self, **kargs):\n\"\"\"Populates GenericModel.fixed_params with the configuration values.\n    If specific values are given in `kargs` those are used.\n    Raises:\n        Exception: If the model configuration could not fill all the array.\n    \"\"\"\nsetattr(self.model, \"fixed_params\", CNP.zeros(\n(len(self.configuration[\"fixed_params\"]), 1), dtype=CNP.float64\n))\ncounter = 0\nfor fparam_name, value in self.configuration[\"fixed_params\"].items():\nfparam_index = self.model.fixed_param_to_index.get(fparam_name)\nif fparam_index is not None:\ncounter += 1 \nself.model.fixed_params[fparam_index] = kargs.get(fparam_name, value)\nif counter &lt; len(self.model.fixed_param_to_index.keys()):\nraise Exception(\"Fixed parameters array could not be correctly created with current options.\")\n</code></pre>"},{"location":"reference/compartmental/parameters/parameters_manager/#compartmental.parameters.parameters_manager.ParametersManager.populate_params","title":"<code>populate_params(**kargs)</code>","text":"<p>Populates GenericModel.params array. If specific values are given in <code>kargs</code> those are used.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the model configuration could not fill all the array.</p> Source code in <code>compartmental/parameters/parameters_manager.py</code> <pre><code>def populate_params(self, **kargs):\n\"\"\"Populates GenericModel.params array. If specific values are given in `kargs` those are used.\n    Raises:\n        Exception: If the model configuration could not fill all the array.\n    \"\"\"\ncounter = 0\ndtype = []\ndtype = [[]]*len(self.model.param_to_index)\nN_SIMULATIONS = self.model.configuration[\"simulation\"][\"n_simulations\"]\nfor param_name, param_config in self.configuration[\"params\"].items():\nparam_index = self.model.param_to_index.get(param_name)\nif param_index is not None:\nTYPE = param_config.get(\"type\", \"float64\")\nif TYPE == 'int':\ndtype[param_index] = (param_name, CNP.int64)\nif TYPE == 'float64':\ndtype[param_index] = (param_name, CNP.float64)\n# setattr(self.model, \"params\", CNP.zeros(\n#     (len(self.configuration[\"params\"]), N_SIMULATIONS), dtype=dtype\n# ))\nsetattr(self.model, \"params\", CNP.zeros(\n(N_SIMULATIONS), dtype=dtype\n))\nfor param_name, param_config in self.configuration[\"params\"].items():\ncounter += 1\nTYPE = param_config.get(\"type\", \"float64\")\nif value := kargs.get(param_name, False):\nself.model.params[param_name] = value\ncontinue\nif TYPE == 'int':\nself.model.params[param_name] = CNP.random.randint(\nparam_config[\"min\"], \nparam_config[\"max\"]+1, \nself.configuration[\"simulation\"][\"n_simulations\"])\nif TYPE == 'float64':\nself.model.params[param_name] = CNP.random.random(\nself.configuration[\"simulation\"][\"n_simulations\"]) \\\n                    * (param_config[\"max\"] - param_config[\"min\"]) \\\n                    + param_config[\"min\"]\nif counter &lt; len(self.model.param_to_index.keys()):\nraise Exception(\"Parameters array could not be correctly created with current options.\")\n</code></pre>"}]}